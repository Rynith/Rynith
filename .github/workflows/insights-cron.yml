# .github/workflows/insights-cron.yml
name: Insights Cron

on:
  schedule:
    - cron: "10 7 * * *"   # daily 07:10 UTC
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: insights-cron
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BASE_URL: ${{ secrets.RUN_BASE_URL }}         # set this to https://www.rynith.com
      INTERNAL_SYNC_KEY: ${{ secrets.INTERNAL_SYNC_KEY }}
    steps:
      - name: Check required secrets
        run: |
          set -euo pipefail
          if [ -z "${BASE_URL:-}" ] || [ -z "${INTERNAL_SYNC_KEY:-}" ]; then
            echo "Missing RUN_BASE_URL or INTERNAL_SYNC_KEY secrets"
            exit 1
          fi
          echo "Target: $BASE_URL"

      - name: Run clustering (prints status + body, retries)
        run: |
          set -euo pipefail
          attempt=0; max=3
          until [ $attempt -ge $max ]; do
            attempt=$((attempt+1))
            echo "POST $BASE_URL/api/insights/cluster (try $attempt/$max)"
            http_code=$(curl -sS -X POST \
              -H "x-internal-key: $INTERNAL_SYNC_KEY" \
              -o cluster.json -w "%{http_code}" \
              "$BASE_URL/api/insights/cluster" || true)
            echo "HTTP $http_code"
            cat cluster.json || true
            echo
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 400 ]; then break; fi
            sleep 8
          done
          test "$http_code" -ge 200 && test "$http_code" -lt 400

      - name: Summarize + actions (prints status + body, retries)
        run: |
          set -euo pipefail
          attempt=0; max=3
          until [ $attempt -ge $max ]; do
            attempt=$((attempt+1))
            echo "POST $BASE_URL/api/insights/summarize (try $attempt/$max)"
            http_code=$(curl -sS -X POST \
              -H "x-internal-key: $INTERNAL_SYNC_KEY" \
              -o summarize.json -w "%{http_code}" \
              "$BASE_URL/api/insights/summarize" || true)
            echo "HTTP $http_code"
            cat summarize.json || true
            echo
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 400 ]; then break; fi
            sleep 8
          done
          test "$http_code" -ge 200 && test "$http_code" -lt 400
